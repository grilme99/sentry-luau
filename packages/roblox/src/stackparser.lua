-- based on: https://github.com/getsentry/sentry-javascript/blob/540adac9ec81803f86a3a7f5b34ebbc1ad2a8d23/packages/browser/src/stack-parsers.ts

local PackageRoot = script.Parent
local Packages = PackageRoot.Parent

local Types = require(Packages.SentryTypes)
type StackFrame = Types.StackFrame
type StackLineParser = Types.StackLineParser
type StackLineParserFn = Types.StackLineParserFn

local Utils = require(Packages.SentryUtils)
local createStackParser = Utils.createStackParser
local logger = Utils.logger

local Client = require(PackageRoot.client)
type RobloxOptions = Client.RobloxOptions

local ClientTypes = require(PackageRoot.types)
type SourcemapEntry = ClientTypes.SourcemapEntry

--- Maps a DataModel path back to the filesystem using a Rojo sourcemap file, if provided. For example, this can turn:
---  - `ReplicatedStorage.Shared.SomeFolder.SomeModule` -> `src/shared/SomeFolder/SomeModule.lua`
---
--- This process is crucial for getting source code alongside stack traces within the Sentry UI.
---
--- @param dmPath Path to an instance on the datamodel (e.g. `ReplicatedStorage.Foo.Bar`). Can be retrieved with `Instance:GetFullName()`.
--- @param sourcemap Sourcemap entry generated by Rojo.
--- @return The corresponding file path of the provided instance, or the original instance path if no file could be found.
local function resolveSourcemapPath(dmPath: string, sourcemap: SourcemapEntry): string
    local dmSegments = string.split(dmPath, ".")
    local finalTargetName = dmSegments[#dmSegments]

    local serviceName = dmSegments[1]
    local serviceExists = pcall(game.GetService, game, serviceName)
    if not serviceExists then
        if _G.__SENTRY_DEV__ then
            logger.warn(
                `Failed to resolve sourcemap path for instance ({dmPath}): invalid service name ({serviceName})`
            )
        end
        return dmPath
    end

    if sourcemap.className ~= "DataModel" then
        if _G.__SENTRY_DEV__ then
            logger.warn(
                `Failed to resolve sourcemap path for instance ({dmPath}): root sourcemap instance is not a DataModel`
            )
        end
        return dmPath
    end

    -- Recursively search through the sourcemap tree until we find this instance
    local finalSourcemapEntry: SourcemapEntry?
    local currentDmSegmentIndex = 1

    local function searchEntryRecursive(currentEntry: SourcemapEntry)
        local targetName = dmSegments[currentDmSegmentIndex]
        if targetName == nil then
            if _G.__SENTRY_DEV__ then
                logger.warn(
                    `Failed to resolve sourcemap path for instance ({dmPath}): sourcemap is missing instance at index {currentDmSegmentIndex}`
                )
            end
            return
        end

        if currentEntry.name == targetName and currentEntry.name == finalTargetName then
            finalSourcemapEntry = currentEntry
            return
        elseif currentEntry.name == targetName then
            if currentEntry.children then
                currentDmSegmentIndex += 1
                for _, entry in currentEntry.children do
                    searchEntryRecursive(entry)
                end
            end
        end
    end

    for _, entry in sourcemap.children do
        searchEntryRecursive(entry)
    end

    if finalSourcemapEntry == nil then
        if _G.__SENTRY_DEV__ then
            logger.warn(`Failed to resolve sourcemap path for instance ({dmPath}): sourcemap does not contain instance`)
        end
        return dmPath
    end

    local filePaths = finalSourcemapEntry.filePaths
    if not filePaths or #filePaths == 0 then
        if _G.__SENTRY_DEV__ then
            logger.warn(`Failed to resolve sourcemap path for instance ({dmPath}): sourcemap entry has no file paths`)
        end
        return dmPath
    end

    return filePaths[1] or dmPath
end

local function createRobloxStackParser(options: RobloxOptions)
    local robloxParser: StackLineParserFn = function(line)
        local path, lineNumber, functionName

        -- note: These pattern matches are based on another Sentry SDK for Roblox
        -- https://github.com/devSparkle/sentry-roblox/blob/429eda39bcfddc3d6065b9744193613b34fce067/src/Integrations/StackProcessor.lua#L32-L56
        if string.find(line, "^Script ") then
            path, lineNumber, functionName = string.match(line, "^Script '(.-)', Line (%d+)%s?%-?%s?(.*)$")
        elseif string.find(line, ", line") then
            path, lineNumber, functionName = string.match(line, "^(.-), line (%d+)%s?%-?%s?(.*)$")
        else
            path, lineNumber, functionName = string.match(line, "^(.-):(%d+)%s?%-?%s?(.*)$")
        end

        if functionName then
            functionName = string.gsub(functionName, "function ", "")
        end

        local sourcemap = options.projectSourcemap
        if path and sourcemap then
            path = resolveSourcemapPath(path, sourcemap)
        end

        return {
            filename = path,
            function_ = functionName,
            lineno = tonumber(lineNumber),
            in_app = true, -- All Roblox frames are considered in_app by default
        }
    end

    local robloxStackLineParser: StackLineParser = {
        priority = 100,
        parser = robloxParser,
    }

    return {
        robloxStackLineParser = robloxStackLineParser,
        defaultStackParser = createStackParser(robloxStackLineParser),
    }
end

return createRobloxStackParser
