"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[598],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return t?r.createElement(h,o(o({ref:n},p),{},{components:t})):r.createElement(h,o({ref:n},p))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6350:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const i={sidebar_position:7},o="Filtering",s={unversionedId:"configuration/filtering",id:"configuration/filtering",title:"Filtering",description:"When you add Sentry to your app, you get a lot of valuable information about errors and performance. And lots of",source:"@site/docs/configuration/filtering.md",sourceDirName:"configuration",slug:"/configuration/filtering",permalink:"/sentry-lua/docs/configuration/filtering",draft:!1,editUrl:"https://github.com/Neura-Studios/sentry-lua/edit/main/docs/configuration/filtering.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"defaultSidebar",previous:{title:"Sampling",permalink:"/sentry-lua/docs/configuration/sampling"},next:{title:"Shutdown and Draining",permalink:"/sentry-lua/docs/configuration/draining"}},l={},c=[{value:"Filtering Error Events",id:"filtering-error-events",level:2},{value:"Using <code>beforeSend</code>",id:"using-beforesend",level:3},{value:"Event Hints",id:"event-hints",level:4},{value:"Using Hints",id:"using-hints",level:3},{value:"Hints for Events",id:"hints-for-events",level:4},{value:"Hints for Breadcrumbs",id:"hints-for-breadcrumbs",level:4},{value:"Using <code>ignoreErrors</code>",id:"using-ignoreerrors",level:3},{value:"Filtering Transaction Events",id:"filtering-transaction-events",level:2},{value:"Using <code>tracesSampler</code>",id:"using-tracessampler",level:3},{value:"Using <code>beforeSendTransaction</code>",id:"using-beforesendtransaction",level:3},{value:"Using <code>ignoreTransactions</code>",id:"using-ignoretransactions",level:3}],p={toc:c},d="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"filtering"},"Filtering"),(0,a.kt)("p",null,"When you add Sentry to your app, you get a lot of valuable information about errors and performance. And lots of\ninformation is good -- as long as it's the right information, at a reasonable volume."),(0,a.kt)("p",null,"The Sentry SDKs have several configuration options to help you filter out events."),(0,a.kt)("p",null,"Sentry also offers ",(0,a.kt)("a",{parentName:"p",href:"https://docs.sentry.io/product/data-management-settings/filtering/"},"Inbound Filters")," to filter\nevents in sentry.io. We recommend filtering at the client level though, because it removes the overhead of sending\nevents you don't actually want. Learn more about the\n",(0,a.kt)("a",{parentName:"p",href:"https://develop.sentry.dev/sdk/event-payloads/"},"fields available in an event"),"."),(0,a.kt)("h2",{id:"filtering-error-events"},"Filtering Error Events"),(0,a.kt)("p",null,"Configure your SDK to filter error events by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"beforeSend")," callback method and configuring, enabling, or\ndisabling integrations."),(0,a.kt)("h3",{id:"using-beforesend"},"Using ",(0,a.kt)("inlineCode",{parentName:"h3"},"beforeSend")),(0,a.kt)("p",null,"All Sentry SDKs support the ",(0,a.kt)("inlineCode",{parentName:"p"},"beforeSend")," callback method. ",(0,a.kt)("inlineCode",{parentName:"p"},"beforeSend")," is called immediately before the event is sent to\nthe server, so it\u2019s the final place where you can edit its data. It receives the event object as a parameter, so you can\nuse that to modify the event\u2019s data or drop it completely (by returning ",(0,a.kt)("inlineCode",{parentName:"p"},"nil"),") based on custom logic and the data\navailable on the event."),(0,a.kt)("p",null,"In Lua, you can use a function to modify the event or return a completely new one. You can either return ",(0,a.kt)("inlineCode",{parentName:"p"},"nil")," or an\nevent payload. If you return ",(0,a.kt)("inlineCode",{parentName:"p"},"nil"),", the event will be discarded."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"Sentry.init({\n    dsn = \"__DSN__\",\n\n    -- Called for message and error events\n    beforeSend = function(event)\n        -- Modify or drop the event here\n        if event.user then\n            -- Don't send user's email address\n            event.user.email = nil\n        end\n        return event\n    end,\n})\n")),(0,a.kt)("p",null,"Note also that breadcrumbs can be filtered, as discussed in the\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.sentry.io/product/error-monitoring/breadcrumbs/"},"Breadcrumbs documentation"),"."),(0,a.kt)("h4",{id:"event-hints"},"Event Hints"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"beforeSend")," callback is passed both the ",(0,a.kt)("inlineCode",{parentName:"p"},"event")," and a second argument, ",(0,a.kt)("inlineCode",{parentName:"p"},"hint"),", that holds one or more hints."),(0,a.kt)("p",null,"Typically a ",(0,a.kt)("inlineCode",{parentName:"p"},"hint")," holds the original exception so that additional data can be extracted or grouping is affected. In\nthis example, the fingerprint is forced to a common value if an exception of a certain type has been caught:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'Sentry.init({\n    -- ...\n    beforeSend = function(event, hint)\n        local error = hint.originalException\n        local message = error and error.message\n        if string.match(message, "database unavailable") then\n            event.fingerprint = { "database-unavailable" }\n        end\n        return event\n    end,\n})\n')),(0,a.kt)("p",null,"For information about which hints are available see ",(0,a.kt)("a",{parentName:"p",href:"/docs/configuration/filtering#using-hints"},"hints in Lua"),"."),(0,a.kt)("p",null,"When the SDK creates an event or breadcrumb for transmission, that transmission is typically created from some sort of\nsource object. For instance, an error event is typically created from a log record or exception instance. For better\ncustomization, SDKs send these objects to certain callbacks (",(0,a.kt)("inlineCode",{parentName:"p"},"beforeSend"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"beforeBreadcrumb")," or the event processor\nsystem in the SDK)."),(0,a.kt)("h3",{id:"using-hints"},"Using Hints"),(0,a.kt)("p",null,"Hints are available in two places:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"beforeSend")," / ",(0,a.kt)("inlineCode",{parentName:"li"},"beforeBreadcrumb")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"eventProcessors"))),(0,a.kt)("p",null,"Event and breadcrumb ",(0,a.kt)("inlineCode",{parentName:"p"},"hints")," are objects containing various information used to put together an event or a breadcrumb.\nTypically ",(0,a.kt)("inlineCode",{parentName:"p"},"hints")," hold the original exception so that additional data can be extracted or grouping can be affected."),(0,a.kt)("p",null,"For events, hints contain properties such as ",(0,a.kt)("inlineCode",{parentName:"p"},"event_id"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"originalException"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"syntheticException")," (used internally to\ngenerate cleaner stack trace), and any other arbitrary ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," that you attach."),(0,a.kt)("p",null,"For breadcrumbs, the use of hints is implementation dependent."),(0,a.kt)("h4",{id:"hints-for-events"},"Hints for Events"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"originalException")),(0,a.kt)("p",null,"The original exception that caused the Sentry SDK to create the event. This is useful for changing how the Sentry SDK\ngroups events or to extract additional information."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"syntheticException")),(0,a.kt)("p",null,"When a string or a non-error object is raised, Sentry creates a synthetic exception so you can get a basic stack trace.\nThis exception is stored here for further data extraction."),(0,a.kt)("h4",{id:"hints-for-breadcrumbs"},"Hints for Breadcrumbs"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"event")),(0,a.kt)("p",null,"For breadcrumbs created from engine events, the Sentry SDK often supplies the event to the breadcrumb as a hint."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"level")," / ",(0,a.kt)("inlineCode",{parentName:"p"},"input")),(0,a.kt)("p",null,"For breadcrumbs created from console log interceptions. This holds the original console log level and the original input\ndata to the log function."),(0,a.kt)("h3",{id:"using-ignoreerrors"},"Using ",(0,a.kt)("inlineCode",{parentName:"h3"},"ignoreErrors")),(0,a.kt)("p",null,"You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"ignoreErrors")," option to filter out errors that match a certain pattern. This option receives a list of\nstrings and regular expressions to match against the error message."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'Sentry.init({\n    dsn = "__DSN__",\n    ignoreErrors = { "fb_xd_fragment", RegExp([[^Exact Match Message$]]) },\n})\n')),(0,a.kt)("h2",{id:"filtering-transaction-events"},"Filtering Transaction Events"),(0,a.kt)("p",null,"To prevent certain transactions from being reported to Sentry, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"tracesSampler")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"beforeSendTransaction"),"\nconfiguration option, which allows you to provide a function to evaluate the current transaction and drop it if it's not\none you want."),(0,a.kt)("h3",{id:"using-tracessampler"},"Using ",(0,a.kt)("inlineCode",{parentName:"h3"},"tracesSampler")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note"),": The ",(0,a.kt)("inlineCode",{parentName:"p"},"tracesSampler")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"tracesSampleRate")," config options are mutually exclusive. If you define a\n",(0,a.kt)("inlineCode",{parentName:"p"},"tracesSampler")," to filter out certain transactions, you must also handle the case of non-filtered transactions by\nreturning the rate at which you'd like them sampled."),(0,a.kt)("p",null,"In its simplest form, used just for filtering the transaction, it looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'Sentry.init({\n    -- ...\n\n    tracesSampler = function(samplingContext)\n        if "..." then\n            -- Drop this transaction, by setting its sample rate to 0%\n            return 0\n        else\n            -- Default sample rate for all others (replaces tracesSampleRate)\n            return 1\n        end\n    end,\n})\n')),(0,a.kt)("p",null,"It also allows you to sample different transactions at different rates."),(0,a.kt)("p",null,"If the transaction currently being processed has a parent transaction (from an upstream service calling this service),\nthe parent (upstream) sampling decision will always be included in the sampling context data, so that your\n",(0,a.kt)("inlineCode",{parentName:"p"},"tracesSampler")," can choose whether and when to inherit that decision. In most cases, inheritance is the right choice, to\navoid breaking distributed traces. A broken trace will not include all your services. See\n",(0,a.kt)("a",{parentName:"p",href:"/docs/configuration/sampling#inheritance"},"Inheriting the parent sampling decision")," to learn more."),(0,a.kt)("p",null,"Learn more about ",(0,a.kt)("a",{parentName:"p",href:"/docs/configuration/sampling"},"configuring the sample rate"),"."),(0,a.kt)("h3",{id:"using-beforesendtransaction"},"Using ",(0,a.kt)("inlineCode",{parentName:"h3"},"beforeSendTransaction")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'Sentry.init({\n    dsn = "__DSN__",\n\n    -- Called for transaction events\n    beforeSendTransaction = function(event)\n        -- Modify or drop the event here\n        if event.transaction == "/unimportant/route" then\n            -- Don\'t send the event to Sentry\n            return nil\n        end\n        return event\n    end,\n})\n')),(0,a.kt)("h3",{id:"using-ignoretransactions"},"Using ",(0,a.kt)("inlineCode",{parentName:"h3"},"ignoreTransactions")),(0,a.kt)("p",null,"You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"ignoreTransactions")," option to filter out transactions that match a certain pattern. This option\nreceives a list of strings and regular expressions to match against the transaction name."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'Sentry.init({\n    dsn = "__DSN__",\n    ignoreTransactions = { "partial/match", RegExp([[^Exact Match Message$]]) },\n})\n')))}u.isMDXComponent=!0}}]);