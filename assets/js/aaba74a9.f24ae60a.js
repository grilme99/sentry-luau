"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[809],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>f});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),u=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},p=function(e){var n=u(e.components);return t.createElement(l.Provider,{value:n},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(r),d=a,f=c["".concat(l,".").concat(d)]||c[d]||g[d]||i;return r?t.createElement(f,o(o({ref:n},p),{},{components:r})):t.createElement(f,o({ref:n},p))}));function f(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=r[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1552:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var t=r(7462),a=(r(7294),r(3905));const i={sidebar_position:2},o="SDK Fingerprinting",s={unversionedId:"usage/sdk-fingerprinting",id:"usage/sdk-fingerprinting",title:"SDK Fingerprinting",description:"All events have a fingerprint. Events with the same fingerprint are grouped together into an issue.",source:"@site/docs/usage/sdk-fingerprinting.md",sourceDirName:"usage",slug:"/usage/sdk-fingerprinting",permalink:"/sentry-lua/docs/usage/sdk-fingerprinting",draft:!1,editUrl:"https://github.com/Neura-Studios/sentry-lua/edit/main/docs/usage/sdk-fingerprinting.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Set the Level",permalink:"/sentry-lua/docs/usage/set-level"},next:{title:"Distributed Tracing",permalink:"/sentry-lua/docs/usage/distributed-tracing"}},l={},u=[{value:"Basic Example",id:"basic-example",level:2},{value:"Group Errors With Greater Granularity",id:"group-errors-with-greater-granularity",level:2},{value:"Group Errors More Aggressively",id:"group-errors-more-aggressively",level:2}],p={toc:u},c="wrapper";function g(e){let{components:n,...r}=e;return(0,a.kt)(c,(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sdk-fingerprinting"},"SDK Fingerprinting"),(0,a.kt)("p",null,"All events have a fingerprint. Events with the same fingerprint are grouped together into an issue."),(0,a.kt)("p",null,"By default, Sentry will run one of our built-in grouping algorithms to generate a fingerprint based on information\navailable within the event such as ",(0,a.kt)("inlineCode",{parentName:"p"},"stacktrace"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"exception"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"message"),". To extend the default grouping behavior or\nchange it completely, you can use a combination of the following options:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"In your SDK, using SDK Fingerprinting, as documented below"),(0,a.kt)("li",{parentName:"ol"},"In your project, using ",(0,a.kt)("a",{parentName:"li",href:"https://docs.sentry.io/product/data-management-settings/event-grouping/fingerprint-rules/"},"Fingerprint Rules")," or ",(0,a.kt)("a",{parentName:"li",href:"https://docs.sentry.io/product/data-management-settings/event-grouping/stack-trace-rules/"},"Stack Trace Rules"))),(0,a.kt)("p",null,"In supported SDKs, you can override Sentry's default grouping that passes the fingerprint attribute as an array of\nstrings. The length of a fingerprint's array is not restricted. This works similarly to the\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.sentry.io/product/data-management-settings/event-grouping/fingerprint-rules/"},"fingerprint rules functionality"),",\nwhich is always available and can achieve similar results."),(0,a.kt)("h2",{id:"basic-example"},"Basic Example"),(0,a.kt)("p",null,"In the most basic case, values are passed directly:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local function makeRequest(method, path, options)\n    return fetch(method, path, options):catch(function(err)\n        Sentry.withScope(function (scope)\n            -- group errors together based on their request and response\n            scope:setFingerprint({method, path, tostring(err.statusCode)})\n            Sentry.captureException(err)\n        end)\n    end)\nend\n")),(0,a.kt)("p",null,"You can use variable substitution to fill dynamic values into the fingerprint generally computed on the server. For\ninstance, the value ",(0,a.kt)("inlineCode",{parentName:"p"},"{{ default }}")," can be added to add the entire normally generated grouping hash into the\nfingerprint. These values are the same as for server-side fingerprinting. See\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.sentry.io/product/data-management-settings/event-grouping/fingerprint-rules/#variables"},"Variables")," for\nmore information."),(0,a.kt)("h2",{id:"group-errors-with-greater-granularity"},"Group Errors With Greater Granularity"),(0,a.kt)("p",null,"In some scenarios, you'll want to group errors more granularly."),(0,a.kt)("p",null,"For example, if your application queries a Remote Procedure Call Model (RPC) interface or external Application\nProgramming Interface (API) service, the stack trace is generally the same, even if the outgoing request is very\ndifferent."),(0,a.kt)("p",null,"The following example will split up the default group Sentry would create (represented by ",(0,a.kt)("inlineCode",{parentName:"p"},"{{ default }}"),") further,\ntaking some attributes on the error object into account:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local LuauPolyfill = require(Path.To.LuauPolyfill)\nlocal Error = LuauPolyfill.Error\nlocal extend = LuauPolyfill.extend\nlocal instanceof = LuauPolyfill.instanceof\n\nlocal MyRPCError = extends(Error, "MyRPCError", function(self, message, functionName, errorCode)\n    self.name = "MyRPCError"\n    self.message = message\n    -- The name of the RPC function that was called (e.g. "getAllBlogArticles")\n    self.functionName = functionName\n    -- For example a HTTP status code returned by the server.\n    self.errorCode = errorCode\nend)\n\nSentry.init({\n    -- ...\n    beforeSend = function(event, hint)\n        local exception = hint.originalException\n\n        if exception and instanceof(exception, MyRPCError) then\n            event.fingerprint = {\n                "{{ default }}",\n                tostring(exception.functionName),\n                tostring(exception.errorCode),\n            }\n        end\n\n        return event\n    end,\n})\n')),(0,a.kt)("h2",{id:"group-errors-more-aggressively"},"Group Errors More Aggressively"),(0,a.kt)("p",null,"You can also overwrite Sentry's grouping entirely."),(0,a.kt)("p",null,"For example, if a generic error, such as a database connection error, has many different stack traces and never groups\nthem together, you can overwrite Sentry's grouping by omitting ",(0,a.kt)("inlineCode",{parentName:"p"},"{{ default }}")," from the array:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local DatabaseConnectionError = extends(Error, "DatabaseConnectionError", function(self, message)\n    self.name = "DatabaseConnectionError"\n    self.message = message\nend)\n\nSentry.init({\n    -- ...\n    beforeSend = function(event, hint)\n        local exception = hint.originalException\n\n        if exception and instanceof(exception, DatabaseConnectionError) then\n            event.fingerprint = { "database-connection-error" }\n        end\n\n        return event\n    end,\n})\n')))}g.isMDXComponent=!0}}]);