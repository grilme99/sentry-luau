"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[544],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8075:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:6},o="Sampling",l={unversionedId:"configuration/sampling",id:"configuration/sampling",title:"Sampling",description:"Adding Sentry to your app gives you a great deal of very valuable information about errors and performance you wouldn't",source:"@site/docs/configuration/sampling.md",sourceDirName:"configuration",slug:"/configuration/sampling",permalink:"/sentry-lua/docs/configuration/sampling",draft:!1,editUrl:"https://github.com/Neura-Studios/sentry-lua/edit/main/docs/configuration/sampling.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"defaultSidebar",previous:{title:"Releases & Health",permalink:"/sentry-lua/docs/configuration/releases"},next:{title:"Filtering",permalink:"/sentry-lua/docs/configuration/filtering"}},s={},p=[{value:"Sampling Error Events",id:"sampling-error-events",level:2},{value:"Sampling Transaction Events",id:"sampling-transaction-events",level:2},{value:"Configuring the Transaction Sample Rate",id:"configuring-the-transaction-sample-rate",level:2},{value:"Setting a Uniform Sample Rate",id:"setting-a-uniform-sample-rate",level:3},{value:"Setting a Sampling Function",id:"setting-a-sampling-function",level:3},{value:"Sampling Context Data",id:"sampling-context-data",level:2},{value:"Default Sampling Context Data",id:"default-sampling-context-data",level:3},{value:"Custom Sampling Context Data",id:"custom-sampling-context-data",level:3},{value:"Inheritance",id:"inheritance",level:2},{value:"Forcing a Sampling Decision",id:"forcing-a-sampling-decision",level:2},{value:"Precedence",id:"precedence",level:2}],c={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"sampling"},"Sampling"),(0,i.kt)("p",null,"Adding Sentry to your app gives you a great deal of very valuable information about errors and performance you wouldn't\notherwise get. And lots of information is good -- as long as it's the right information, at a reasonable volume."),(0,i.kt)("h2",{id:"sampling-error-events"},"Sampling Error Events"),(0,i.kt)("p",null,"To send a representative sample of your errors to Sentry, set the ",(0,i.kt)("inlineCode",{parentName:"p"},"sampleRate")," option in your SDK configuration to a\nnumber between ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," (0% of errors sent) and ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," (100% of errors sent). This is a static rate, which will apply equally to\nall errors. For example, to sample 25% of your errors:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"Sentry.init({ sampleRate = 0.25 })\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Changing the error sample rate requires re-deployment. In addition, setting an SDK sample rate limits visibility into\nthe source of events. Setting a rate limit for your project (which only drops events when volume is high) may better\nsuit your needs.")),(0,i.kt)("h2",{id:"sampling-transaction-events"},"Sampling Transaction Events"),(0,i.kt)("p",null,"Sentry recommends sampling your transactions for two reasons:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Capturing a single trace involves minimal overhead, but capturing traces for ",(0,i.kt)("em",{parentName:"li"},"every")," page load or ",(0,i.kt)("em",{parentName:"li"},"every")," API request\nmay add an undesirable load to your system."),(0,i.kt)("li",{parentName:"ul"},"Enabling sampling allows you to better manage the number of events sent to Sentry, so you can tailor your volume to\nyour organization's needs.")),(0,i.kt)("p",null,"Choose a sampling rate with the goal of finding a balance between performance and volume concerns with data accuracy.\nYou don't want to collect too much data, but you want to collect sufficient data from which to draw meaningful\nconclusions. If you\u2019re not sure what rate to choose, start with a low value and gradually increase it as you learn more\nabout your traffic patterns and volume."),(0,i.kt)("h2",{id:"configuring-the-transaction-sample-rate"},"Configuring the Transaction Sample Rate"),(0,i.kt)("p",null,"The Sentry SDKs have two configuration options to control the volume of transactions sent to Sentry, allowing you to\ntake a representative sample:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Uniform sample rate (",(0,i.kt)("inlineCode",{parentName:"li"},"tracesSampleRate"),"):",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Provides an even cross-section of transactions, no matter where in your app or under what circumstances they\noccur."),(0,i.kt)("li",{parentName:"ul"},"Uses default ",(0,i.kt)("a",{parentName:"li",href:"/docs/configuration/sampling#inheritance"},"inheritance")," and ",(0,i.kt)("a",{parentName:"li",href:"/docs/configuration/sampling#precedence"},"precedence")," behavior"))),(0,i.kt)("li",{parentName:"ol"},"Sampling function (",(0,i.kt)("inlineCode",{parentName:"li"},"tracesSampler"),") which:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Samples different transactions at different rates"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/configuration/filtering"},"Filters")," out some transactions entirely"),(0,i.kt)("li",{parentName:"ul"},"Modifies default ",(0,i.kt)("a",{parentName:"li",href:"/docs/configuration/sampling#inheritance"},"inheritance")," and ",(0,i.kt)("a",{parentName:"li",href:"/docs/configuration/sampling#precedence"},"precedence")," behavior")))),(0,i.kt)("h3",{id:"setting-a-uniform-sample-rate"},"Setting a Uniform Sample Rate"),(0,i.kt)("p",null,"To do this, set the ",(0,i.kt)("inlineCode",{parentName:"p"},"tracesSampleRate")," option in your ",(0,i.kt)("inlineCode",{parentName:"p"},"Sentry.init()")," to a number between 0 and 1. With this option set,\nevery transaction created will have that percentage chance of being sent to Sentry. (So, for example, if you set\n",(0,i.kt)("inlineCode",{parentName:"p"},"tracesSampleRate")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"0.5"),", approximately 50% of your transactions will get recorded and sent.) That looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"Sentry.init({\n    -- ...\n    tracesSampleRate = 0.5,\n})\n")),(0,i.kt)("h3",{id:"setting-a-sampling-function"},"Setting a Sampling Function"),(0,i.kt)("p",null,"To use the sampling function, set the ",(0,i.kt)("inlineCode",{parentName:"p"},"tracesSampler")," option in your ",(0,i.kt)("inlineCode",{parentName:"p"},"Sentry.init()")," to a function that will accept a\n",(0,i.kt)("inlineCode",{parentName:"p"},"samplingContext")," object and return a sample rate between 0 and 1. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'Sentry.init({\n    -- ...\n\n    tracesSampler = function(samplingContext)\n        -- Examine provided context data (including parent decision, if any) along\n        -- with anything in the global namespace to compute the sample rate or\n        -- sampling decision for this transaction\n\n        if "..." then\n            -- These are important - take a big sample\n            return 1\n        elseif "..." then\n            -- These are less important or happen much more frequently - only take 1%\n            return 0.01\n        elseif "..." then\n            -- These aren\'t something worth tracking - drop all transactions like this\n            return 0\n        else\n            -- Default sample rate\n            return 0.5\n        end\n    end,\n})\n')),(0,i.kt)("p",null,"For convenience, the function can also return a boolean. Returning ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," is equivalent to returning ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),", and will\nguarantee the transaction will be sent to Sentry. Returning ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," is equivalent to returning ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," and will guarantee\nthe transaction will not be sent to Sentry."),(0,i.kt)("h2",{id:"sampling-context-data"},"Sampling Context Data"),(0,i.kt)("h3",{id:"default-sampling-context-data"},"Default Sampling Context Data"),(0,i.kt)("p",null,"The information contained in the ",(0,i.kt)("inlineCode",{parentName:"p"},"samplingContext")," object passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"tracesSampler")," when a transaction is created\nvaries by platform and integration."),(0,i.kt)("p",null,"For Roblox-based SDKs, it includes at least the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- contents of `samplingContext`\n{\n    transactionContext = {\n        name = string, -- human-readable identifier, like "GET /users"\n        op = string, -- short description of transaction type, like "pageload"\n    },\n    parentSampled = boolean, -- if this transaction has a parent, its sampling decision\n    ... -- custom context as passed to `startTransaction`\n}\n')),(0,i.kt)("h3",{id:"custom-sampling-context-data"},"Custom Sampling Context Data"),(0,i.kt)("p",null,"When using custom instrumentation to create a transaction, you can add data to the ",(0,i.kt)("inlineCode",{parentName:"p"},"samplingContext")," by passing it as an\noptional second argument to ",(0,i.kt)("inlineCode",{parentName:"p"},"startTransaction"),". This is useful if there's data to which you want the sampler to have\naccess but which you don't want to attach to the transaction as ",(0,i.kt)("inlineCode",{parentName:"p"},"tags")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"data"),", such as information that's sensitive\nor that\u2019s too large to send with the transaction. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'Sentry.startTransaction(\n    {\n        -- `transactionContext` - will be recorded on transaction\n        name = "Search from navbar",\n        op = "search",\n        tags = {\n            testGroup = "A3",\n            treatmentName = "eager load",\n        },\n    },\n    -- `customSamplingContext` - won\'t be recorded\n    {\n        -- PII\n        userId = "12312012",\n        -- too big to send\n        resultsFromLastSearch = { ... },\n    }\n)\n')),(0,i.kt)("h2",{id:"inheritance"},"Inheritance"),(0,i.kt)("p",null,"Whatever a transaction's sampling decision, that decision will be passed to its child spans and from there to any\ntransactions they subsequently cause in other services."),(0,i.kt)("p",null,"(See ",(0,i.kt)("a",{parentName:"p",href:"/docs/usage/distributed-tracing"},"Distributed Tracing")," for more about how that propagation is done.)"),(0,i.kt)("p",null,"If the transaction currently being created is one of those subsequent transactions (in other words, if it has a parent\ntransaction), the upstream (parent) sampling decision will be included in the sampling context data. Your\n",(0,i.kt)("inlineCode",{parentName:"p"},"tracesSampler")," can use this information to choose whether to inherit that decision. In most cases, inheritance is the\nright choice, to avoid breaking distributed traces. A broken trace will not include all your services."),(0,i.kt)("p",null,"In some SDKs, for convenience, the ",(0,i.kt)("inlineCode",{parentName:"p"},"tracesSampler")," function can return a boolean, so that a parent's decision can be\nreturned directly if that's the desired behavior."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"tracesSampler = function(samplingContext)\n    -- always inherit\n    if samplingContext.parentSampled ~= nil then\n        return samplingContext.parentSampled\n    end\n\n    ...\n    -- rest of sampling logic here\nend\n")),(0,i.kt)("p",null,"If you're using a ",(0,i.kt)("inlineCode",{parentName:"p"},"tracesSampleRate")," rather than a ",(0,i.kt)("inlineCode",{parentName:"p"},"tracesSampler"),", the decision will always be inherited."),(0,i.kt)("h2",{id:"forcing-a-sampling-decision"},"Forcing a Sampling Decision"),(0,i.kt)("p",null,"If you know at transaction creation time whether or not you want the transaction sent to Sentry, you also have the\noption of passing a sampling decision directly to the transaction constructor (note, not in the ",(0,i.kt)("inlineCode",{parentName:"p"},"customSamplingContext"),"\nobject). If you do that, the transaction won't be subject to the ",(0,i.kt)("inlineCode",{parentName:"p"},"tracesSampleRate"),", nor will ",(0,i.kt)("inlineCode",{parentName:"p"},"tracesSampler")," be run, so\nyou can count on the decision that's passed not to be overwritten."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'Sentry.startTransaction({\n    name = "Search from navbar",\n    sampled = true,\n})\n')),(0,i.kt)("h2",{id:"precedence"},"Precedence"),(0,i.kt)("p",null,"There are multiple ways for a transaction to end up with a sampling decision."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Random sampling according to a static sample rate set in ",(0,i.kt)("inlineCode",{parentName:"li"},"tracesSampleRate")),(0,i.kt)("li",{parentName:"ul"},"Random sampling according to a sample function rate returned by ",(0,i.kt)("inlineCode",{parentName:"li"},"tracesSampler")),(0,i.kt)("li",{parentName:"ul"},"Absolute decision (100% chance or 0% chance) returned by ",(0,i.kt)("inlineCode",{parentName:"li"},"tracesSampler")),(0,i.kt)("li",{parentName:"ul"},"If the transaction has a parent, inheriting its parent's sampling decision"),(0,i.kt)("li",{parentName:"ul"},"Absolute decision passed to ",(0,i.kt)("inlineCode",{parentName:"li"},"startTransaction"))),(0,i.kt)("p",null,"When there's the potential for more than one of these to come into play, the following precedence rules apply:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"If a sampling decision is passed to ",(0,i.kt)("inlineCode",{parentName:"li"},"startTransaction"),", that decision will be used, overriding everything else."),(0,i.kt)("li",{parentName:"ol"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"tracesSampler")," is defined, its decision will be used. It can choose to keep or ignore any parent sampling\ndecision, use the sampling context data to make its own decision, or choose a sample rate for the transaction. We\nadvise against overriding the parent sampling decision because it will break distributed traces)"),(0,i.kt)("li",{parentName:"ol"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"tracesSampler")," is not defined, but there's a parent sampling decision, the parent sampling decision will be used."),(0,i.kt)("li",{parentName:"ol"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"tracesSampler")," is not defined and there's no parent sampling decision, ",(0,i.kt)("inlineCode",{parentName:"li"},"tracesSampleRate")," will be used.")))}u.isMDXComponent=!0}}]);